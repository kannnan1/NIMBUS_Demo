import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error
from statsmodels.api import OLS, add_constant
import matplotlib.pyplot as plt

# Sample data
np.random.seed(0)
data = pd.DataFrame({
    'time': pd.date_range(start='1/1/2020', periods=100, freq='M'),
    'value': np.random.randn(100).cumsum() + np.arange(100) * 0.5
})

# Split the data into train and test sets (80-20 split)
train_size = int(len(data) * 0.8)
train_data = data.iloc[:train_size]
test_data = data.iloc[train_size:]

# Define the dependent variable and independent variable(s)
y_train = train_data['value']
X_train = add_constant(train_data.index)

y_test = test_data['value']
X_test = add_constant(test_data.index)

# Fit the OLS model on the original and train data
model_original = OLS(data['value'], add_constant(data.index)).fit()
model_train = OLS(y_train, X_train).fit()

# Extract coefficients
coefficients = pd.DataFrame({
    'Variable': model_original.params.index,
    'Original_Coef': model_original.params.values,
    'Train_Coef': model_train.params.values
})

print("Coefficients comparison:\n", coefficients)

# Predict using the models
y_pred_train = model_train.predict(X_train)
y_pred_test = model_train.predict(X_test)

# Calculate metrics for train and test sets
mse_train = mean_squared_error(y_train, y_pred_train)
mse_test = mean_squared_error(y_test, y_pred_test)

rmse_train = np.sqrt(mse_train)
rmse_test = np.sqrt(mse_test)

me_train = np.mean(y_train - y_pred_train)
me_test = np.mean(y_test - y_pred_test)

mape_train = np.mean(np.abs((y_train - y_pred_train) / y_train)) * 100
mape_test = np.mean(np.abs((y_test - y_pred_test) / y_test)) * 100

# Create a DataFrame for the metrics
metrics = pd.DataFrame({
    'Metric': ['MSE', 'RMSE', 'ME', 'MAPE'],
    'Train_Data': [mse_train, rmse_train, me_train, mape_train],
    'Holdout_Data': [mse_test, rmse_test, me_test, mape_test]
})

print("\nMetrics comparison:\n", metrics)

# Plot actual vs predicted values
plt.figure(figsize=(12, 6))
plt.plot(train_data['time'], y_train, label='Actual Train Data', color='blue')
plt.plot(train_data['time'], y_pred_train, label='Predicted Train Data', color='orange', linestyle='dashed')
plt.plot(test_data['time'], y_test, label='Actual Test Data', color='green')
plt.plot(test_data['time'], y_pred_test, label='Predicted Test Data', color='red', linestyle='dashed')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()
