import numpy as np
import pandas as pd

def extract_numeric_suffix(s):
    """Extract numeric suffix from the end of the string."""
    suffix = ''.join(filter(str.isdigit, s))
    return int(suffix) if suffix else None

def apply_transformations(df, feature_list):
    """Apply various transformations to the DataFrame columns based on feature_list."""
    # Create an empty DataFrame to store sensitivity variables
    sensitivity_df = pd.DataFrame(index=df.index)

    # Loop through each column in the DataFrame
    for col in df.columns:
        sensitivity_var = df[col] + df[col].std()
        sensitivity_df[col] = sensitivity_var

        # Loop through each feature in the feature list
        for feature in feature_list:
            if feature.startswith(col):
                transformation_part = feature[len(col):]
                split_feature = transformation_part.split('_')

                # Extract numeric suffixes from parts of the split feature
                lag_suffix = None
                diff_suffix = None
                ma_suffix = None

                for part in split_feature:
                    if 'lag' in part:
                        lag_suffix = extract_numeric_suffix(part)
                    elif 'diff' in part:
                        diff_suffix = extract_numeric_suffix(part)
                    elif 'Q' in part:
                        ma_suffix = extract_numeric_suffix(part)
                        print(ma_suffix)
                # Apply transformations based on the extracted parts
                if 'lag' in transformation_part:
                    if lag_suffix is not None:
                        lagged_var = sensitivity_var.shift(lag_suffix)
                        sensitivity_df[feature] = lagged_var

                if 'diff' in transformation_part:
                    if diff_suffix is not None:
                        diff_var = sensitivity_var.diff(diff_suffix)
                        if lag_suffix is not None:
                            diff_var = diff_var.shift(lag_suffix)
                        sensitivity_df[feature] = diff_var

                if 'pct' in transformation_part:
                    pct_var = sensitivity_var.pct_change() * 100
                    if lag_suffix is not None:
                        pct_var = pct_var.shift(lag_suffix)
                    sensitivity_df[feature] = pct_var

                if 'Y_O_Y' in transformation_part:
                    yoy_var = sensitivity_var.pct_change(periods=4) * 100
                    if lag_suffix is not None:
                        yoy_var = yoy_var.shift(lag_suffix)
                    sensitivity_df[feature] = yoy_var

                if 'log' in transformation_part:
                    if (df[col] > 0).all():
                        log_var = np.log(sensitivity_var)
                        sensitivity_df[f'{col}_log'] = log_var
                        if lag_suffix is not None:
                            lagged_log_var = np.log(sensitivity_var).shift(lag_suffix)
                            sensitivity_df[f'{col}_log_lag{lag_suffix}'] = lagged_log_var
                        if diff_suffix is not None:
                            log_diff_var = log_var.diff(diff_suffix)
                            sensitivity_df[f'{col}_log_diff{diff_suffix}'] = log_diff_var
                            if lag_suffix is not None:
                                lagged_log_diff_var = log_diff_var.shift(lag_suffix)
                                sensitivity_df[f'{col}_log_diff{diff_suffix}_lag{lag_suffix}'] = lagged_log_diff_var

                if 'Q' in transformation_part:
                    if ma_suffix is not None:
                        ma_var = sensitivity_var.rolling(ma_suffix).mean()
                        sensitivity_df[f'{col}_MA_Q{ma_suffix}'] = ma_var

    return sensitivity_df

# Example usage
MEV_df1 = pd.DataFrame({
    'GDP': [100, 102, 104, 106, 108, 110],
    'Inflation': [2, 2.1, 2.2, 2.3, 2.4, 2.5],
    'InterestRate': [0.5, 0.55, 0.6, 0.65, 0.7, 0.8]
})

feature_list = [
    'GDP_MA_Q4','InterestRate_MA_Q4'
]

sensitivity_analysis_df = apply_transformations(MEV_df1, feature_list)
print(sensitivity_analysis_df)
